@each $title, $color in (white: $white, blue: $blue, blueLight: $blueLight, blueBright: $blueBright, blueDark: $blueDark, brown: $brown, brownDark: $brownDark, red: $red, redBright: $redBright, redDark: $redDark, pink: $pink, orange: $orange, orangeDark: $orangeDark, yellow: $yellow, yellowLight: $yellowLight, yellowBright: $yellowBright, violet: $violet, violetLight: $violetLight, green: $green, greenLight: $greenLight, greenDark: $greenDark, lime: $lime, breeze: $breeze, emerald: $emerald, black: $black, blackDark: $blackDark, blackLight: $blackLight, steel: $steel, steelDark: $steelDark, silver: $silver, gray: $gray, grayDark: $grayDark, grayDarken: $grayDarken, grayLight: $grayLight, grayLighten: $grayLighten, grayLightenSilver: $grayLightenSilver, smoke: $smoke, smokeLight: $smokeLight, smokeDark: $smokeDark, snow: $snow, snowLight: $snowLight, snowSilver: $snowSilver, snowDark: $snowDark){
    .bg-#{$title} {
        background-color:$color;
    }
    .c-#{$title} {
        color:$color;
    }
    .fill-#{$title} {
        fill:$color;
    }
    .borderColor-#{$title} {
        border-color:$color;
    }
    svg[fill-color="#{$title}"]{
        path, rect, polygon, circle {
            fill:$color;
        }
    }
}
@each $title, $color in (primary: $blue, info: $blueLight, success: $green, danger: $red, warning: $orange, dark: $black){
    .btn-#{$title} {
        color:$white;
        background-color:$color;

        .btn-svg-color {
            fill:$white;
        }
        html.m-no-touch &:hover {
            background-color:darken($color,9%);
        }
    }
    .btn-#{$title}-hover {
        color:$color;
        background-color:transparent;
        box-shadow:inset 0 0 0 1px $color;

        .btn-svg-color {
            fill:$color;
        }
        &:hover {
            color:#fff;
            background-color:$color;
            box-shadow:none;

            .btn-svg-color {
                fill:#fff;
            }
        }
    }
    .notify[data-color=#{$title}] {
        background-color:$color;
        box-shadow:0 12px 20px -10px rgba($color,.28), 0 4px 20px 0px rgba($color,.12), 0 7px 8px -5px rgba($color,.2);
    }
}
body {
    @each $color in ($blue, $blueLight, $green, $emerald, $orange, $red, $violet, $violetLight, $brown, $pink){
        &[data-color="#{$color}"]{
            .control__colors__item,
            .button__editable {
                background-color:$color;
            }
        }
    }
}
.control__colors {
    @extend .pos-abs;
    @extend .t--xxs;
    left:-7px;
    @extend .willChange-transform;
    transition:transform .2s;
    @extend .zIndex-2;

    &__item {
        @extend .pos-rel;
        @extend .w35;
        @extend .h35;
        @extend .borderRadius-circle;
        box-shadow:inset 0 1px 2px rgba(#000,.13);
        @extend .zIndex-1;

        &:after {
            @extend .content-empty;
            @extend .pos-centered;
            @extend .w10;
            @extend .h10;
            @extend .borderRadius-circle;
            @extend .bg-white;
        }
    }
    &:active {
        transform:translate3d(0, 0, 0) scale(0.85);
    }
}
.bg-overlay {
    background-color:rgba(40,47,51,.76);
}
.bg-radial-blue {
    background:radial-gradient(rgba($blue,.0), $blue);
}
.bg-radial-black {
    background:radial-gradient(rgba($black,.0), $black);
}
.bg-gradient-tb-white {
	background:linear-gradient(to bottom, #fff, rgba(#fff,0));
}
.bg-gradient-bt-white {
	background:linear-gradient(to top, #fff, rgba(#fff,0));
}
.bg-gradient-lr-white {
	background:linear-gradient(to right, #fff, rgba(#fff,0));
}
.bg-gradient-rl-white {
	background:linear-gradient(to left, #fff, rgba(#fff,0));
}
